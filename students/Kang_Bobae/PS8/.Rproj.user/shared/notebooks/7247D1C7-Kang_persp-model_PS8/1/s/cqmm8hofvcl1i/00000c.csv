"0","# tree (pruned)"
"0","fitted_tree <- predict(mhealth_tree_pruned, as_tibble(mhealth_test), type = ""class"")"
"0","tree_err <- mean(as_tibble(mhealth_test)$vote96 != fitted_tree)"
"0","roc_tree <- roc(as.numeric(as_tibble(mhealth_test)$vote96), as.numeric(fitted_tree))"
"0","# bagging"
"0","fitted_bag <- predict(mhealth_bag, as_tibble(mhealth_test), type = ""prob"")[,2]"
"0","roc_bag <- roc(as_tibble(mhealth_test)$vote96, fitted_bag)"
"0","# random forest"
"0","fitted_rf <- predict(mhealth_rf, as_tibble(mhealth_test), type = ""prob"")[,2]"
"0","roc_rf <- roc(as_tibble(mhealth_test)$vote96, fitted_rf)"
"0","# boost, lambda = 0.001"
"0","fitted_bst.001 <- predict(mhealth_bst.001, as_tibble(mhealth_test2), type = ""response"", n.trees=5000)"
"0","roc_bst.001 <- roc(as_tibble(mhealth_test2)$vote96, fitted_bst.001)"
"0","# boost, lambda = 0.1"
"0","fitted_bst.1 <- predict(mhealth_bst.1, as_tibble(mhealth_test2), type = ""response"", n.trees=5000)"
"0","roc_bst.1 <- roc(as_tibble(mhealth_test2)$vote96, fitted_bst.1)"
"0","# plot ROC curves"
"0","plot(roc_tree, print.auc = TRUE, col = ""red"", print.auc.x = .2)"
